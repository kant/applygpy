#!/usr/bin/env python
# encoding: utf-8
'''
__main__ -- Main running script for the AstroZeneca data

@author:     Max Zwiessele

@copyright:  2015 organization_name. All rights reserved.

@license:    BSD3

@contact:    m.zwiessele@sheffield.ac.uk
@deffield    updated: 29.09.15
'''

import sys
import os

from optparse import OptionParser
from data import load_libsvm
from model_selection import cross_validate

__all__ = []
__version__ = 0.1
__date__ = '2015-09-29'
__updated__ = '2015-09-29'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = 'astrozeneca'
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''
    This script runs the astrozeca analysis in the commandline. 
    
    There are two options, either classification or regression. 
    If not set, the script tries to 
    
    ''' # optional - give further explanation about what the program does
    program_license = ("Copyright 2015 Max Zwiessele\nLicensed under the BSD 3 Licence")

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.pickle", infile="./in.train")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        X, Y = load_libsvm(opts.infile)
        res = cross_validate(X, Y)
        res.to_pickle(opts.outfile)
        # MAIN BODY #

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '__main___profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())